import { useState } from "react";
import { ChakraProvider } from "@chakra-ui/react";
import Head from "next/head";
import theme from "../../utils/theme";
import Header from "../Header";
import { providerOptions } from "../../utils/providerOptions";
import Web3Modal from "web3modal";
import { ethers } from "ethers";
import { toHex } from "../../utils/utils";

interface LayoutProps {
  children: React.ReactNode;
}

interface SwitchError extends Error {
  code: number;
}

const web3Modal = new Web3Modal({
  cacheProvider: true,
  providerOptions,
});

type Provider =
  | ethers.providers.ExternalProvider
  | ethers.providers.JsonRpcFetchFunc;

export default function Layout({ children }: LayoutProps) {
  const [provider, setProvider] = useState<Provider>();
  const [library, setLibrary] = useState<ethers.providers.Web3Provider>();
  const [account, setAccount] = useState<string[]>();
  const [signature, setSignature] = useState("");
  const [error, setError] = useState<Error>();
  const [chainId, setChainId] = useState<number>();
  const [network, setNetwork] = useState<number>();
  const [message, setMessage] = useState("");
  const [signedMessage, setSignedMessage] = useState("");
  const [verified, setVerified] = useState();

  const handleNetwork = (e) => {
    const id = e.target.value;
    setNetwork(Number(id));
  };

  const handleInput = (e) => {
    const msg = e.target.value;
    setMessage(msg);
  };

  const connectWallet = async () => {
    try {
      const provider = await web3Modal.connect();
      const library = new ethers.providers.Web3Provider(provider);
      const accounts = await library.listAccounts();
      const network = await library.getNetwork();
      setProvider(provider);
      setLibrary(library);
      if (accounts) setAccount(accounts);
      setChainId(network.chainId);
    } catch (error) {
      setError(error as Error);
    }
  };

  const switchNetwork = async () => {
    if (!library || !network) {
      window.alert("Please connect to a wallet first");
      return;
    }
  };

  return (
    <>
      <ChakraProvider theme={theme}>
        <Head>
          <title>Recommender</title>
          <meta name="description" content="Generated by create next app" />
        </Head>
        <Header />
        <main>{children}</main>
        <div> Footer </div>
      </ChakraProvider>
    </>
  );
}
